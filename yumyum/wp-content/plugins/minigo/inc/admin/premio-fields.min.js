/**
 *
 * Color picker
 * Author: Stefan Petre www.eyecon.ro
 * 
 * Dual licensed under the MIT and GPL licenses
 * 
 */

(function($) {
    var ColorPicker = function() {
        var
            ids = {},
            inAction,
            charMin = 65,
            visible,
            tpl = '<div class="colorpicker"><div class="colorpicker_color"><div><div></div></div></div><div class="colorpicker_hue"><div></div></div><div class="colorpicker_new_color"></div><div class="colorpicker_current_color"></div><div class="colorpicker_hex"><input type="text" maxlength="6" size="6" /></div><div class="colorpicker_rgb_r colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_g colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_b colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_h colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_s colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_b colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_submit">Select</div></div>',

            defaults = {
                eventName: 'click',
                onShow: function() {},
                onBeforeShow: function() {},
                onHide: function() {},
                onChange: function() {},
                onSubmit: function() {},
                color: 'ff0000',
                livePreview: true,
                flat: false
            },

            fillRGBFields = function(hsb, cal) {
                var rgb = HSBToRGB(hsb);
                $(cal).data('colorpicker').fields
                .eq(1).val(rgb.r).end()
                .eq(2).val(rgb.g).end()
                .eq(3).val(rgb.b).end();
            },

            fillHSBFields = function(hsb, cal) {
                $(cal).data('colorpicker').fields
                .eq(4).val(hsb.h).end()
                .eq(5).val(hsb.s).end()
                .eq(6).val(hsb.b).end();
            },

            fillHexFields = function(hsb, cal) {
                $(cal).data('colorpicker').fields
                    .eq(0).val(HSBToHex(hsb)).end();
            },

            setSelector = function(hsb, cal) {
                $(cal).data('colorpicker').selector.css('backgroundColor', '#' + HSBToHex({ h: hsb.h, s: 100, b: 100 }));
                $(cal).data('colorpicker').selectorIndic.css({
                    left: parseInt(150 * hsb.s / 100, 10),
                    top: parseInt(150 * (100 - hsb.b) / 100, 10)
                });
            },

            setHue = function(hsb, cal) {
                $(cal).data('colorpicker').hue.css('top', parseInt(150 - 150 * hsb.h / 360, 10));
            },

            setCurrentColor = function(hsb, cal) {
                $(cal).data('colorpicker').currentColor.css('backgroundColor', '#' + HSBToHex(hsb));
            },

            setNewColor = function(hsb, cal) {
                $(cal).data('colorpicker').newColor.css('backgroundColor', '#' + HSBToHex(hsb));
            },

            keyDown = function(ev) {
                var pressedKey = ev.charCode || ev.keyCode || -1;
                if ((pressedKey > charMin && pressedKey <= 90) || pressedKey == 32) {
                    return false;
                }
                var cal = $(this).parent().parent();
                if (cal.data('colorpicker').livePreview === true) {
                    change.apply(this);
                }
            },

            change = function(ev) {
                var cal = $(this).parent().parent(),
                    col;

                if (this.parentNode.className.indexOf('_hex') > 0) {
                    cal.data('colorpicker').color = col = HexToHSB(fixHex(this.value));

                } else if (this.parentNode.className.indexOf('_hsb') > 0) {
                    cal.data('colorpicker').color = col = fixHSB({
                        h: parseInt(cal.data('colorpicker').fields.eq(4).val(), 10),
                        s: parseInt(cal.data('colorpicker').fields.eq(5).val(), 10),
                        b: parseInt(cal.data('colorpicker').fields.eq(6).val(), 10)
                    });

                } else {
                    cal.data('colorpicker').color = col = RGBToHSB(fixRGB({
                        r: parseInt(cal.data('colorpicker').fields.eq(1).val(), 10),
                        g: parseInt(cal.data('colorpicker').fields.eq(2).val(), 10),
                        b: parseInt(cal.data('colorpicker').fields.eq(3).val(), 10)
                    }));

                }

                if (ev) {
                    fillRGBFields(col, cal.get(0));
                    fillHexFields(col, cal.get(0));
                    fillHSBFields(col, cal.get(0));
                }

                setSelector(col, cal.get(0));
                setHue(col, cal.get(0));
                setNewColor(col, cal.get(0));
                cal.data('colorpicker').onChange.apply(cal, [col, HSBToHex(col), HSBToRGB(col)]);
            },

            blur = function(ev) {
                var cal = $(this).parent().parent();
                cal.data('colorpicker').fields.parent().removeClass('colorpicker_focus');
            },

            focus = function() {
                charMin = this.parentNode.className.indexOf('_hex') > 0 ? 70 : 65;
                $(this).parent().parent().data('colorpicker').fields.parent().removeClass('colorpicker_focus');
                $(this).parent().addClass('colorpicker_focus');
            },

            downIncrement = function(ev) {
                var field = $(this).parent().find('input').focus();

                var current = {
                    el: $(this).parent().addClass('colorpicker_slider'),
                    max: this.parentNode.className.indexOf('_hsb_h') > 0 ? 360 : (this.parentNode.className.indexOf('_hsb') > 0 ? 100 : 255),
                    y: ev.pageY,
                    field: field,
                    val: parseInt(field.val(), 10),
                    preview: $(this).parent().parent().data('colorpicker').livePreview
                };

                $(document).bind('mouseup', current, upIncrement);
                $(document).bind('mousemove', current, moveIncrement);

            },

            moveIncrement = function(ev) {
                ev.data.field.val(Math.max(0, Math.min(ev.data.max, parseInt(ev.data.val + ev.pageY - ev.data.y, 10))));

                if (ev.data.preview) {
                    change.apply(ev.data.field.get(0), [true]);
                }
                return false;
            },

            upIncrement = function(ev) {
                change.apply(ev.data.field.get(0), [true]);
                ev.data.el.removeClass('colorpicker_slider').find('input').focus();
                $(document).unbind('mouseup', upIncrement);
                $(document).unbind('mousemove', moveIncrement);
                return false;
            },

            downHue = function(ev) {

                var current = {
                    cal: $(this).parent(),
                    y: $(this).offset().top
                };

                current.preview = current.cal.data('colorpicker').livePreview;
                $(document).bind('mouseup', current, upHue);
                $(document).bind('mousemove', current, moveHue);
            },

            moveHue = function(ev) {

                change.apply(
                    ev.data.cal.data('colorpicker')
                    .fields
                    .eq(4)
                    .val(parseInt(360 * (150 - Math.max(0, Math.min(150, (ev.pageY - ev.data.y)))) / 150, 10))
                    .get(0),
                    [ev.data.preview]
                );
                return false;
            },

            upHue = function(ev) {
                fillRGBFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
                fillHexFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
                $(document).unbind('mouseup', upHue);
                $(document).unbind('mousemove', moveHue);
                return false;
            },

            downSelector = function(ev) {
                var current = {
                    cal: $(this).parent(),
                    pos: $(this).offset()
                };

                current.preview = current.cal.data('colorpicker').livePreview;
                $(document).bind('mouseup', current, upSelector);
                $(document).bind('mousemove', current, moveSelector);
            },

            moveSelector = function(ev) {
                change.apply(
                    ev.data.cal.data('colorpicker')
                    .fields
                    .eq(6)
                    .val(parseInt(100 * (150 - Math.max(0, Math.min(150, (ev.pageY - ev.data.pos.top)))) / 150, 10))
                    .end()
                    .eq(5)
                    .val(parseInt(100 * (Math.max(0, Math.min(150, (ev.pageX - ev.data.pos.left)))) / 150, 10))
                    .get(0),
                    [ev.data.preview]
                );
                return false;
            },

            upSelector = function(ev) {
                fillRGBFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
                fillHexFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
                $(document).unbind('mouseup', upSelector);
                $(document).unbind('mousemove', moveSelector);
                return false;
            },

            enterSubmit = function(ev) {
                $(this).addClass('colorpicker_focus');
            },

            leaveSubmit = function(ev) {
                $(this).removeClass('colorpicker_focus');
            },

            clickSubmit = function(ev) {
                var cal = $(this).parent();
                var col = cal.data('colorpicker').color;
                cal.data('colorpicker').origColor = col;
                setCurrentColor(col, cal.get(0));
                cal.data('colorpicker').onSubmit(col, HSBToHex(col), HSBToRGB(col), cal.data('colorpicker').el);
            },

            show = function(ev) {
                var cal = $('#' + $(this).data('colorpickerId'));
                cal.data('colorpicker').onBeforeShow.apply(this, [cal.get(0)]);
                var pos = $(this).offset();
                var viewPort = getViewport();
                var top = pos.top + this.offsetHeight;
                var left = pos.left;
                if (top + 176 > viewPort.t + viewPort.h) {
                    top -= this.offsetHeight + 176;
                }
                if (left + 356 > viewPort.l + viewPort.w) {
                    left -= 356;
                }
                cal.css({ left: left + 'px', top: top + 'px' });
                if (cal.data('colorpicker').onShow.apply(this, [cal.get(0)]) != false) {
                    cal.show();
                }

                $(document).bind('mousedown', { cal: cal }, hide);
                return false;
            },

            hide = function(ev) {
                if (!isChildOf(ev.data.cal.get(0), ev.target, ev.data.cal.get(0))) {
                    if (ev.data.cal.data('colorpicker').onHide.apply(this, [ev.data.cal.get(0)]) != false) {
                        ev.data.cal.hide();
                    }
                    $(document).unbind('mousedown', hide);
                }
            },
            isChildOf = function(parentEl, el, container) {
                if (parentEl == el) {
                    return true;
                }
                if (parentEl.contains) {
                    return parentEl.contains(el);
                }
                if (parentEl.compareDocumentPosition) {
                    return !!(parentEl.compareDocumentPosition(el) & 16);
                }
                var prEl = el.parentNode;
                while (prEl && prEl != container) {
                    if (prEl == parentEl)
                        return true;
                    prEl = prEl.parentNode;
                }
                return false;
            },
            getViewport = function() {
                var m = document.compatMode == 'CSS1Compat';
                return {
                    l: window.pageXOffset || (m ? document.documentElement.scrollLeft : document.body.scrollLeft),
                    t: window.pageYOffset || (m ? document.documentElement.scrollTop : document.body.scrollTop),
                    w: window.innerWidth || (m ? document.documentElement.clientWidth : document.body.clientWidth),
                    h: window.innerHeight || (m ? document.documentElement.clientHeight : document.body.clientHeight)
                };
            },
            fixHSB = function(hsb) {
                return {
                    h: Math.min(360, Math.max(0, hsb.h)),
                    s: Math.min(100, Math.max(0, hsb.s)),
                    b: Math.min(100, Math.max(0, hsb.b))
                };
            },
            fixRGB = function(rgb) {
                return {
                    r: Math.min(255, Math.max(0, rgb.r)),
                    g: Math.min(255, Math.max(0, rgb.g)),
                    b: Math.min(255, Math.max(0, rgb.b))
                };
            },
            fixHex = function(hex) {
                var len = 6 - hex.length;
                if (len > 0) {
                    var o = [];
                    for (var i = 0; i < len; i++) {
                        o.push('0');
                    }
                    o.push(hex);
                    hex = o.join('');
                }
                return hex;
            },
            HexToRGB = function(hex) {
                var hex = parseInt(((hex.indexOf('#') > -1) ? hex.substring(1) : hex), 16);
                return { r: hex >> 16, g: (hex & 0x00FF00) >> 8, b: (hex & 0x0000FF) };
            },
            HexToHSB = function(hex) {
                return RGBToHSB(HexToRGB(hex));
            },
            RGBToHSB = function(rgb) {
                var hsb = {
                    h: 0,
                    s: 0,
                    b: 0
                };
                var min = Math.min(rgb.r, rgb.g, rgb.b);
                var max = Math.max(rgb.r, rgb.g, rgb.b);
                var delta = max - min;
                hsb.b = max;
                if (max != 0) {

                }
                hsb.s = max != 0 ? 255 * delta / max : 0;
                if (hsb.s != 0) {
                    if (rgb.r == max) {
                        hsb.h = (rgb.g - rgb.b) / delta;
                    } else if (rgb.g == max) {
                        hsb.h = 2 + (rgb.b - rgb.r) / delta;
                    } else {
                        hsb.h = 4 + (rgb.r - rgb.g) / delta;
                    }
                } else {
                    hsb.h = -1;
                }
                hsb.h *= 60;
                if (hsb.h < 0) {
                    hsb.h += 360;
                }
                hsb.s *= 100 / 255;
                hsb.b *= 100 / 255;
                return hsb;
            },
            HSBToRGB = function(hsb) {
                var rgb = {};
                var h = Math.round(hsb.h);
                var s = Math.round(hsb.s * 255 / 100);
                var v = Math.round(hsb.b * 255 / 100);
                if (s == 0) {
                    rgb.r = rgb.g = rgb.b = v;
                } else {
                    var t1 = v;
                    var t2 = (255 - s) * v / 255;
                    var t3 = (t1 - t2) * (h % 60) / 60;
                    if (h == 360) h = 0;
                    if (h < 60) {
                        rgb.r = t1;
                        rgb.b = t2;
                        rgb.g = t2 + t3
                    } else if (h < 120) {
                        rgb.g = t1;
                        rgb.b = t2;
                        rgb.r = t1 - t3
                    } else if (h < 180) {
                        rgb.g = t1;
                        rgb.r = t2;
                        rgb.b = t2 + t3
                    } else if (h < 240) {
                        rgb.b = t1;
                        rgb.r = t2;
                        rgb.g = t1 - t3
                    } else if (h < 300) {
                        rgb.b = t1;
                        rgb.g = t2;
                        rgb.r = t2 + t3
                    } else if (h < 360) {
                        rgb.r = t1;
                        rgb.g = t2;
                        rgb.b = t1 - t3
                    } else {
                        rgb.r = 0;
                        rgb.g = 0;
                        rgb.b = 0
                    }
                }
                return { r: Math.round(rgb.r), g: Math.round(rgb.g), b: Math.round(rgb.b) };
            },
            RGBToHex = function(rgb) {
                var hex = [
                    rgb.r.toString(16),
                    rgb.g.toString(16),
                    rgb.b.toString(16)
                ];

                $.each(hex, function(nr, val) {
                    if (val.length == 1) {
                        hex[nr] = '0' + val;
                    }
                });
                return hex.join('');
            },
            HSBToHex = function(hsb) {
                return RGBToHex(HSBToRGB(hsb));
            },
            restoreOriginal = function() {
                var cal = $(this).parent();
                var col = cal.data('colorpicker').origColor;
                cal.data('colorpicker').color = col;
                fillRGBFields(col, cal.get(0));
                fillHexFields(col, cal.get(0));
                fillHSBFields(col, cal.get(0));
                setSelector(col, cal.get(0));
                setHue(col, cal.get(0));
                setNewColor(col, cal.get(0));
            };
        return {
            init: function(opt) {
                opt = $.extend({}, defaults, opt || {});
                if (typeof opt.color == 'string') {
                    opt.color = HexToHSB(opt.color);
                } else if (opt.color.r != undefined && opt.color.g != undefined && opt.color.b != undefined) {
                    opt.color = RGBToHSB(opt.color);
                } else if (opt.color.h != undefined && opt.color.s != undefined && opt.color.b != undefined) {
                    opt.color = fixHSB(opt.color);
                } else {
                    return this;
                }
                return this.each(function() {
                    if (!$(this).data('colorpickerId')) {
                        var options = $.extend({}, opt);
                        options.origColor = opt.color;
                        var id = 'collorpicker_' + parseInt(Math.random() * 10000);
                        $(this).data('colorpickerId', id);
                        var cal = $(tpl).attr('id', id);
                        if (options.flat) {
                            cal.appendTo(this).show();
                        } else {
                            cal.appendTo(document.body);
                        }
                        options.fields = cal
                            .find('input')
                        .bind('keyup', keyDown)
                        .bind('change', change)
                        .bind('blur', blur)
                        .bind('focus', focus);
                        cal
                            .find('span').bind('mousedown', downIncrement).end()
                        .find('>div.colorpicker_current_color').bind('click', restoreOriginal);
                        options.selector = cal.find('div.colorpicker_color').bind('mousedown', downSelector);
                        options.selectorIndic = options.selector.find('div div');
                        options.el = this;
                        options.hue = cal.find('div.colorpicker_hue div');
                        cal.find('div.colorpicker_hue').bind('mousedown', downHue);
                        options.newColor = cal.find('div.colorpicker_new_color');
                        options.currentColor = cal.find('div.colorpicker_current_color');
                        cal.data('colorpicker', options);
                        cal.find('div.colorpicker_submit')
                        .bind('mouseenter', enterSubmit)
                        .bind('mouseleave', leaveSubmit)
                        .bind('click', clickSubmit);
                        fillRGBFields(options.color, cal.get(0));
                        fillHSBFields(options.color, cal.get(0));
                        fillHexFields(options.color, cal.get(0));
                        setHue(options.color, cal.get(0));
                        setSelector(options.color, cal.get(0));
                        setCurrentColor(options.color, cal.get(0));
                        setNewColor(options.color, cal.get(0));
                        if (options.flat) {
                            cal.css({
                                position: 'relative',
                                display: 'block'
                            });
                        } else {
                            $(this).bind(options.eventName, show);
                        }
                    }
                });
            },
            showPicker: function() {
                return this.each(function() {
                    if ($(this).data('colorpickerId')) {
                        show.apply(this);
                    }
                });
            },
            hidePicker: function() {
                return this.each(function() {
                    if ($(this).data('colorpickerId')) {
                        $('#' + $(this).data('colorpickerId')).hide();
                    }
                });
            },
            setColor: function(col) {
                if (typeof col == 'string') {
                    col = HexToHSB(col);
                } else if (col.r != undefined && col.g != undefined && col.b != undefined) {
                    col = RGBToHSB(col);
                } else if (col.h != undefined && col.s != undefined && col.b != undefined) {
                    col = fixHSB(col);
                } else {
                    return this;
                }
                return this.each(function() {
                    if ($(this).data('colorpickerId')) {
                        var cal = $('#' + $(this).data('colorpickerId'));
                        cal.data('colorpicker').color = col;
                        cal.data('colorpicker').origColor = col;
                        fillRGBFields(col, cal.get(0));
                        fillHSBFields(col, cal.get(0));
                        fillHexFields(col, cal.get(0));
                        setHue(col, cal.get(0));
                        setSelector(col, cal.get(0));
                        setCurrentColor(col, cal.get(0));
                        setNewColor(col, cal.get(0));
                    }
                });
            }
        };
    }();
    $.fn.extend({
        ColorPicker: ColorPicker.init,
        ColorPickerHide: ColorPicker.hidePicker,
        ColorPickerShow: ColorPicker.showPicker,
        ColorPickerSetColor: ColorPicker.setColor
    });
    $('#colorpickerField1').ColorPicker({
       onSubmit: function(hsb, hex, rgb, el) {
           $(el).val(hex);
           $(el).ColorPickerHide();
       },
       onBeforeShow: function() {
            $(this).ColorPickerSetColor(this.value);
        }
    });

})(jQuery)
/*global redux_change, wp, redux, libFilter */

/**
 * Media Uploader
 * Dependencies        : jquery, wp media uploader
 * Feature added by    : Smartik - http://smartik.ws/
 * Date                  : 05.28.2013
 */

jQuery(document).ready(function() {

(function($){
    "use strict";

    redux.field_objects         = redux.field_objects || {};
    redux.field_objects.media   = redux.field_objects.media || {};

    var isFiltered;

    $( document ).ready(
        function() {

        }
    );

    redux.field_objects.media.init = function( selector ) {
        if ( !selector ) {
            selector = $( document ).find( ".redux-group-tab:visible" ).find( '.redux-container-media:visible' );
        }
        $( selector ).each(
            function() {
                var el = $( this );
                var parent = el;

                if ( !el.hasClass( 'redux-field-container' ) ) {
                    parent = el.parents( '.redux-field-container:first' );
                }
                if ( parent.is( ":hidden" ) ) { // Skip hidden fields
                    return;
                }
                if ( parent.hasClass( 'redux-field-init' ) ) {
                    parent.removeClass( 'redux-field-init' );
                } else {
                    return;
                }

                isFiltered = false;

                // Remove the image button
                el.find( '.remove-image, .remove-file' ).unbind( 'click' ).on(
                    'click', function() {
                        redux.field_objects.media.removeFile( $( this ).parents( 'fieldset.redux-field:first' ) );
                    }
                );
                // Upload media button
                el.find( '.media_upload_button' ).unbind().on(
                    'click', function( event ) {
                        redux.field_objects.media.addFile( event, $( this ).parents( 'fieldset.redux-field:first' ) );
                    }
                );
            }
        );
    };

    // Add a file via the wp.media function
    redux.field_objects.media.addFile = function( event, selector ) {
        event.preventDefault();

        var frame;
        var jQueryel = $( this );
        var libFilter;

        // If the media frame already exists, reopen it.
        if ( frame ) {
            frame.open();
            return;
        }

        // Get library filter data
        var filter = $( selector ).find('.library-filter').data('lib-filter');

        // Must exist to do decoding
        if (filter !== undefined) {
            if (filter !== ''){
                libFilter = [];
                isFiltered = true;
                filter = decodeURIComponent(filter);
                filter = JSON.parse(filter);

                $.each(filter, function(index, value) {
                    libFilter.push(value);
                });
            }
        }

        // Create the media frame.
        frame = wp.media(
            {
                multiple: false,
                library: {
                    type: libFilter //Only allow images
                },

                // Set the title of the modal.
                title: jQueryel.data( 'choose' ),

                // Customize the submit button.
                button: {
                    // Set the text of the button.
                    text: jQueryel.data( 'update' )
                    // Tell the button not to close the modal, since we're
                    // going to refresh the page when the image is selected.
                }
            }
        );

        // When an image is selected, run a callback.
        frame.on(
            'select', function() {

                // Grab the selected attachment.
                var attachment = frame.state().get( 'selection' ).first();
                frame.close();

                var data = $( selector ).find('.data').data();

                if ( typeof redux.field_objects.media === 'undefined' || typeof redux.field_objects.media === undefined ) {
                    redux.field_objects.media = {};
                }

                if ( data === undefined || data.mode === 'undefined' ) {
                    data = {};
                    data.mode = "image";
                }

                if (isFiltered === true) {
                    data.mode = 0;
                }

                if (data.mode === 0) {

                } else {
                    if ( data.mode !== false) {
                        if (attachment.attributes.type !== data.mode) {
                            if (attachment.attributes.subtype !== data.mode ) {
                                return;
                            }
                        }
                    }
                }

                selector.find( '.upload' ).val( attachment.attributes.url );
                selector.find( '.upload-id' ).val( attachment.attributes.id );
                selector.find( '.upload-height' ).val( attachment.attributes.height );
                selector.find( '.upload-width' ).val( attachment.attributes.width );

                redux_change( $( selector ).find( '.upload-id' ) );

                var thumbSrc = attachment.attributes.url;
                if ( typeof attachment.attributes.sizes !== 'undefined' && typeof attachment.attributes.sizes.thumbnail !== 'undefined' ) {
                    thumbSrc = attachment.attributes.sizes.thumbnail.url;
                } else if ( typeof attachment.attributes.sizes !== 'undefined' ) {
                    var height = attachment.attributes.height;

                    for ( var key in attachment.attributes.sizes ) {
                        var object = attachment.attributes.sizes[key];

                        if ( object.height < height ) {
                            height = object.height;
                            thumbSrc = object.url;
                        }
                    }
                } else {
                    thumbSrc = attachment.attributes.icon;
                }

                selector.find( '.upload-thumbnail' ).val( thumbSrc );
                if ( !selector.find( '.upload' ).hasClass( 'noPreview' ) ) {
                    selector.find( '.screenshot' ).empty().hide().append( '<img class="redux-option-image" src="' + thumbSrc + '">' ).slideDown( 'fast' );
                }

                //selector.find('.media_upload_button').unbind();
                selector.find( '.remove-image' ).removeClass( 'hide' );//show "Remove" button
                selector.find( '.redux-background-properties' ).slideDown();
            }
        );

        // Finally, open the modal.
        frame.open();
    };

    // Function to remove the image on click. Still requires a save
    redux.field_objects.media.removeFile = function( selector ) {

        // This shouldn't have been run...
        if ( !selector.find( '.remove-image' ).addClass( 'hide' ) ) {
            return;
        }

        selector.find( '.remove-image' ).addClass( 'hide' );//hide "Remove" button
        selector.find( '.upload' ).val( '' );
        selector.find( '.upload-id' ).val( '' );
        selector.find( '.upload-height' ).val( '' );
        selector.find( '.upload-width' ).val( '' );
        selector.find( '.upload-thumbnail' ).val( '' );
        redux_change( $( selector ).find( '.upload-id' ) );
        selector.find( '.redux-background-properties' ).hide();

        var screenshot = selector.find( '.screenshot' );

        // Hide the screenshot
        screenshot.slideUp();

        selector.find( '.remove-file' ).unbind();

        // We don't display the upload button if .upload-notice is present
        // This means the user doesn't have the WordPress 3.5 Media Library Support
        if ( selector.find( '.section-upload .upload-notice' ).length > 0 ) {
            selector.find( '.media_upload_button' ).remove();
        }
    };
})( jQuery );

});

/** Contact Info Custom Field JS
 ** ============================
 ** (c) Premio Themes | premiothemes.com | <hello@premiothemes.com>
 */

/* global redux_change, wp */

jQuery(document).ready(function() {

    /** Remove Slide
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-contact_info-remove').live('click', function() {
        redux_change(jQuery(this));

        // Clear all Field Values
        jQuery(this).parent().siblings().find('input[type="text"]').val('');
        jQuery(this).parent().siblings().find('input[type="checkbox"]').val('');
        jQuery(this).parent().siblings().find('textarea').val('');
        jQuery(this).parent().siblings().find('select').val('');
        jQuery(this).parent().siblings().find('input[type="hidden"]').val('');

        // Figure out Item Count
        var itemsCount = jQuery(this).parents('.redux-container-contact_info').find('.redux-contact_info-accordion-group').length;

        // If we have more than one item, remove the current Item
        if (itemsCount > 1) {
            jQuery(this).parents('.redux-contact_info-accordion-group:first').slideUp('medium', function() {
                jQuery(this).remove();
            });
        } else {
            jQuery(this).parents('.redux-contact_info-accordion-group:first').find('.remove-image').click();
            jQuery(this).parents('.redux-container-contact_info:first').find('.redux-contact_info-accordion-group:last').find('.redux-contact_info-header').text("New Contact Info");
            jQuery(this).parents('.redux-contact_info-accordion-group:first').find('input[type="text"], input[type="hidden"], input[type="checkbox"], textarea, select, .media_upload_button, .label-new-window').each(function() {
                jQuery(this).val('');
                jQuery(this).find('input[type="checkbox"]').removeAttr('checked');
            });
        }
    });

    /** Remove All Slides
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-contact_info-remove-all').live('click', function() {

        jQuery(this).parents('.redux-container-contact_info').find('.redux-contact_info-accordion-group').not(':first').each(function() {
            jQuery(this).children().find('.redux-contact_info-remove').trigger('click');
        });

    });

    /** Add Slide
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-contact_info-add').click(function() {

        // Find Last Slide
        var oldSlide = jQuery(this).parent().prev().find('.redux-contact_info-accordion-group:last');

        console.log(oldSlide);

        // Clear Fancy Icon Selector
        oldSlide.find('select').select2('destroy');

        // Clone Last Slide
        var newSlide = oldSlide.clone(true);

        // Figure out Item Count from Last Slide input field ID
        var itemsCount = jQuery(newSlide).find('input[type="text"]').attr("name").match(/[0-9]+(?!.*[0-9])/);
        var itemsCount1 = itemsCount * 1 + 1;

        // Increment specified field Names and IDs
        jQuery(newSlide).find('input[type="text"], input[type="hidden"], input[type="checkbox"], textarea, select, .media_upload_button, .label-new-window').each(function() {

            if (typeof jQuery(this).attr("name") !== 'undefined') {
                jQuery(this).attr("name", jQuery(this).attr("name").replace(/[0-9]+(?!.*[0-9])/, itemsCount1));
            }

            if (typeof jQuery(this).attr("id") !== 'undefined') {
                jQuery(this).attr("id", jQuery(this).attr("id").replace(/[0-9]+(?!.*[0-9])/, itemsCount1));
            }
            if (typeof jQuery(this).attr("for") !== 'undefined') {
                jQuery(this).attr("for", jQuery(this).attr("for").replace(/[0-9]+(?!.*[0-9])/, itemsCount1));
            }

            jQuery(this).val('');
            if (jQuery(this).hasClass('contact_info-sort')) {
                jQuery(this).val(itemsCount1);
            }
        });

        // Clear Fields - remove attributes and hide thumbnail
        newSlide.find('input[type="checkbox"]').removeAttr('checked');
        // newSlide.find('.screenshot').removeAttr('style');
        // newSlide.find('.screenshot').addClass('hide');
        // newSlide.find('.screenshot a').attr('href', '');
        // newSlide.find('.remove-image').addClass('hide');
        // newSlide.find('.redux-slides-image').attr('src', '').removeAttr('id');

        // Append New Slide Title and UI
        newSlide.find('h3').text('').append('<span class="redux-contact_info-header">New Contact Info</span><span class="ui-accordion-header-icon ui-icon ui-icon-plus"></span>');

        // Append Slide
        jQuery(this).parent().prev().append(newSlide);

        // Add Fancy Icon Selector
        jQuery.redux.select3();
    });

    /** Update Slide Title
     ** ---------------------------------------------------------------------*/
    jQuery('.contact_info-title').keyup(function(event) {
        var newTitle = event.target.value;
        jQuery(this).parents().eq(3).find('.redux-contact_info-header').text(newTitle);
    });

    /** Accordion Setup and Sorting
     ** ---------------------------------------------------------------------*/
    jQuery(function() {
        jQuery(".redux-contact_info-accordion")
            .accordion({
                header: "> div > fieldset > h3",
                collapsible: true,
                active: false,
                heightStyle: "content",
                icons: { "header": "ui-icon-plus", "activeHeader": "ui-icon-minus" }
            })
            .sortable({
                axis: "y",
                handle: "h3",
                connectWith: ".redux-contact_info-accordion",
                start: function(e, ui) {
                    ui.placeholder.height(ui.item.height());
                    ui.placeholder.width(ui.item.width());
                },
                placeholder: "ui-state-highlight",
                stop: function(event, ui) {
                    // IE doesn't register the blur when sorting
                    // so trigger focusout handlers to remove .ui-state-focus
                    ui.item.children("h3").triggerHandler("focusout");
                    var inputs = jQuery('input.contact_info-sort');
                    inputs.each(function(idx) {
                        jQuery(this).val(idx);
                    });
                }
            });
    });

});

/** Counter Features Custom Field JS
 ** ================================
 ** (c) Premio Themes | premiothemes.com | <hello@premiothemes.com>
 */

/* global redux_change, wp */

jQuery(document).ready(function() {

    /** Remove Slide
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-counter_features-remove').live('click', function() {
        redux_change(jQuery(this));

        // Clear all Field Values
        jQuery(this).parent().siblings().find('input[type="text"]').val('');
        jQuery(this).parent().siblings().find('input[type="checkbox"]').val('');
        jQuery(this).parent().siblings().find('textarea').val('');
        jQuery(this).parent().siblings().find('select').val('');
        jQuery(this).parent().siblings().find('input[type="hidden"]').val('');

        // Figure out Item Count
        var itemsCount = jQuery(this).parents('.redux-container-counter_features').find('.redux-counter_features-accordion-group').length;

        // If we have more than one item, remove the current Item
        if (itemsCount > 1) {
            jQuery(this).parents('.redux-counter_features-accordion-group:first').slideUp('medium', function() {
                jQuery(this).remove();
            });
        } else {
            jQuery(this).parents('.redux-counter_features-accordion-group:first').find('.remove-image').click();
            jQuery(this).parents('.redux-container-counter_features:first').find('.redux-counter_features-accordion-group:last').find('.redux-counter_features-header').text("New Slide");
            jQuery(this).parents('.redux-counter_features-accordion-group:first').find('input[type="text"], input[type="hidden"], input[type="checkbox"], textarea, select, .media_upload_button, .label-new-window').each(function() {
                jQuery(this).val('');
                jQuery(this).find('input[type="checkbox"]').removeAttr('checked');
            });
        }
    });

    /** Remove All Slides << New
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-counter_features-remove-all').live('click', function() {

        jQuery(this).parents('.redux-container-counter_features').find('.redux-counter_features-accordion-group').not(':first').each(function() {
            jQuery(this).children().find('.redux-counter_features-remove').trigger('click');
        });

    });

    /** Add Slide
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-counter_features-add').click(function() {

        // Find Last Slide
        var oldSlide = jQuery(this).parent().prev().find('.redux-counter_features-accordion-group:last');

        console.log(oldSlide);
        // Clear Fancy Icon Selector
        oldSlide.find('select').select2('destroy');

        // Clone Last Slide
        var newSlide = oldSlide.clone(true);

        // Figure out Item Count from Last Slide input field ID
        var itemsCount = jQuery(newSlide).find('input[type="text"]').attr("name").match(/[0-9]+(?!.*[0-9])/);
        var itemsCount1 = itemsCount * 1 + 1;

        // Increment specified field Names and IDs
        jQuery(newSlide).find('input[type="text"], input[type="hidden"], input[type="checkbox"], textarea, select, .media_upload_button, .label-new-window').each(function() {

            if (typeof jQuery(this).attr("name") !== 'undefined') {
                jQuery(this).attr("name", jQuery(this).attr("name").replace(/[0-9]+(?!.*[0-9])/, itemsCount1));
            }

            if (typeof jQuery(this).attr("id") !== 'undefined') {
                jQuery(this).attr("id", jQuery(this).attr("id").replace(/[0-9]+(?!.*[0-9])/, itemsCount1));
            }
            if(typeof jQuery(this).attr("for") !== 'undefined') {
                jQuery(this).attr("for", jQuery(this).attr("for").replace(/[0-9]+(?!.*[0-9])/, itemsCount1) );
            }
            
            jQuery(this).val('');
            if (jQuery(this).hasClass('counter_features-sort')) {
                jQuery(this).val(itemsCount1);
            }
        });

        // Clear Fields - remove attributes and hide thumbnail
        // newSlide.find('input[type="checkbox"]').removeAttr('checked');
        // newSlide.find('.screenshot').removeAttr('style');
        // newSlide.find('.screenshot').addClass('hide');
        // newSlide.find('.screenshot a').attr('href', '');
        // newSlide.find('.remove-image').addClass('hide');
        // newSlide.find('.redux-slides-image').attr('src', '').removeAttr('id');

        // Append New Slide Title and UI
        newSlide.find('h3').text('').append('<span class="redux-counter_features-header">New Counter Feature</span><span class="ui-accordion-header-icon ui-icon ui-icon-plus"></span>');

        // Append Slide
        jQuery(this).parent().prev().append(newSlide);

        // Add Fancy Icon Selector
        jQuery.redux.select3();
    });

    /** Update Slide Title
     ** ---------------------------------------------------------------------*/
    jQuery('.counter_features-title').keyup(function(event) {
        var newTitle = event.target.value;
        jQuery(this).parents().eq(3).find('.redux-counter_features-header').text(newTitle);
    });

    /** Accordion Setup and Sorting
     ** ---------------------------------------------------------------------*/
    jQuery(function() {
        jQuery(".redux-counter_features-accordion")
            .accordion({
                header: "> div > fieldset > h3",
                collapsible: true,
                active: false,
                heightStyle: "content",
                icons: { "header": "ui-icon-plus", "activeHeader": "ui-icon-minus" }
            })
            .sortable({
                axis: "y",
                handle: "h3",
                connectWith: ".redux-counter_features-accordion",
                start: function(e, ui) {
                    ui.placeholder.height(ui.item.height());
                    ui.placeholder.width(ui.item.width());
                },
                placeholder: "ui-state-highlight",
                stop: function(event, ui) {
                    // IE doesn't register the blur when sorting
                    // so trigger focusout handlers to remove .ui-state-focus
                    ui.item.children("h3").triggerHandler("focusout");
                    var inputs = jQuery('input.counter_features-sort');
                    inputs.each(function(idx) {
                        jQuery(this).val(idx);
                    });
                }
            });
    });

});
/** Icon Features Custom Field JS
 ** =============================
 ** (c) Premio Themes | premiothemes.com | <hello@premiothemes.com>
 */

/* global redux_change, wp */

jQuery(document).ready(function() {

    /** Remove Slide
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-icon_features-remove').live('click', function() {
        redux_change(jQuery(this));

        // Clear all Field Values
        jQuery(this).parent().siblings().find('input[type="text"]').val('');
        jQuery(this).parent().siblings().find('input[type="checkbox"]').val('');
        jQuery(this).parent().siblings().find('textarea').val('');
        jQuery(this).parent().siblings().find('select').val('');
        jQuery(this).parent().siblings().find('input[type="hidden"]').val('');

        // Figure out Item Count
        var itemsCount = jQuery(this).parents('.redux-container-icon_features').find('.redux-icon_features-accordion-group').length;

        // If we have more than one item, remove the current Item
        if (itemsCount > 1) {
            jQuery(this).parents('.redux-icon_features-accordion-group:first').slideUp('medium', function() {
                jQuery(this).remove();
            });
        } else {
            jQuery(this).parents('.redux-icon_features-accordion-group:first').find('.remove-image').click();
            jQuery(this).parents('.redux-container-icon_features:first').find('.redux-icon_features-accordion-group:last').find('.redux-icon_features-header').text("New Slide");
            jQuery(this).parents('.redux-icon_features-accordion-group:first').find('input[type="text"], input[type="hidden"], input[type="checkbox"], textarea, select, .media_upload_button, .label-new-window').each(function() {
                jQuery(this).val('');
                jQuery(this).find('input[type="checkbox"]').removeAttr('checked');
            });
        }
    });

    /** Remove All Slides << New
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-icon_features-remove-all').live('click', function() {

        jQuery(this).parents('.redux-container-icon_features').find('.redux-icon_features-accordion-group').not(':first').each(function() {
            jQuery(this).children().find('.redux-icon_features-remove').trigger('click');
        });

    });

    /** Add Slide
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-icon_features-add').click(function() {

        // Find Last Slide
        var oldSlide = jQuery(this).parent().prev().find('.redux-icon_features-accordion-group:last');

        console.log(oldSlide);
        // Clear Fancy Icon Selector
        oldSlide.find('select').select2('destroy');

        // Clone Last Slide
        var newSlide = oldSlide.clone(true);

        // Figure out Item Count from Last Slide input field ID
        var itemsCount = jQuery(newSlide).find('input[type="text"]').attr("name").match(/[0-9]+(?!.*[0-9])/);
        var itemsCount1 = itemsCount * 1 + 1;

        // Increment specified field Names and IDs
        jQuery(newSlide).find('input[type="text"], input[type="hidden"], input[type="checkbox"], textarea, select, .media_upload_button, .label-new-window').each(function() {

            if (typeof jQuery(this).attr("name") !== 'undefined') {
                jQuery(this).attr("name", jQuery(this).attr("name").replace(/[0-9]+(?!.*[0-9])/, itemsCount1));
            }

            if (typeof jQuery(this).attr("id") !== 'undefined') {
                jQuery(this).attr("id", jQuery(this).attr("id").replace(/[0-9]+(?!.*[0-9])/, itemsCount1));
            }
            if(typeof jQuery(this).attr("for") !== 'undefined') {
                jQuery(this).attr("for", jQuery(this).attr("for").replace(/[0-9]+(?!.*[0-9])/, itemsCount1) );
            }
            
            jQuery(this).val('');
            if (jQuery(this).hasClass('icon_features-sort')) {
                jQuery(this).val(itemsCount1);
            }
        });

        // Clear Fields - remove attributes and hide thumbnail
        // newSlide.find('input[type="checkbox"]').removeAttr('checked');
        // newSlide.find('.screenshot').removeAttr('style');
        // newSlide.find('.screenshot').addClass('hide');
        // newSlide.find('.screenshot a').attr('href', '');
        // newSlide.find('.remove-image').addClass('hide');
        // newSlide.find('.redux-slides-image').attr('src', '').removeAttr('id');

        // Append New Slide Title and UI
        newSlide.find('h3').text('').append('<span class="redux-icon_features-header">New Icon Feature</span><span class="ui-accordion-header-icon ui-icon ui-icon-plus"></span>');

        // Append Slide
        jQuery(this).parent().prev().append(newSlide);

        // Add Fancy Icon Selector
        jQuery.redux.select3();
    });

    /** Update Slide Title
     ** ---------------------------------------------------------------------*/
    jQuery('.icon_features-title').keyup(function(event) {
        var newTitle = event.target.value;
        jQuery(this).parents().eq(3).find('.redux-icon_features-header').text(newTitle);
    });

    /** Accordion Setup and Sorting
     ** ---------------------------------------------------------------------*/
    jQuery(function() {
        jQuery(".redux-icon_features-accordion")
            .accordion({
                header: "> div > fieldset > h3",
                collapsible: true,
                active: false,
                heightStyle: "content",
                icons: { "header": "ui-icon-plus", "activeHeader": "ui-icon-minus" }
            })
            .sortable({
                axis: "y",
                handle: "h3",
                connectWith: ".redux-icon_features-accordion",
                start: function(e, ui) {
                    ui.placeholder.height(ui.item.height());
                    ui.placeholder.width(ui.item.width());
                },
                placeholder: "ui-state-highlight",
                stop: function(event, ui) {
                    // IE doesn't register the blur when sorting
                    // so trigger focusout handlers to remove .ui-state-focus
                    ui.item.children("h3").triggerHandler("focusout");
                    var inputs = jQuery('input.icon_features-sort');
                    inputs.each(function(idx) {
                        jQuery(this).val(idx);
                    });
                }
            });
    });

});
/** Icon List Custom Field JS
 ** =========================
 ** (c) Premio Themes | premiothemes.com | <hello@premiothemes.com>
 */

/* global redux_change, wp */

jQuery(document).ready(function() {

    /** Remove Slide
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-icon_list-remove').live('click', function() {
        redux_change(jQuery(this));

        // Clear all Field Values
        jQuery(this).parent().siblings().find('input[type="text"]').val('');
        jQuery(this).parent().siblings().find('input[type="checkbox"]').val('');
        jQuery(this).parent().siblings().find('textarea').val('');
        jQuery(this).parent().siblings().find('select').val('');
        jQuery(this).parent().siblings().find('input[type="hidden"]').val('');

        // Figure out Item Count
        var itemsCount = jQuery(this).parents('.redux-container-icon_list').find('.redux-icon_list-accordion-group').length;

        // If we have more than one item, remove the current Item
        if (itemsCount > 1) {
            jQuery(this).parents('.redux-icon_list-accordion-group:first').slideUp('medium', function() {
                jQuery(this).remove();
            });
        } else {
            jQuery(this).parents('.redux-icon_list-accordion-group:first').find('.remove-image').click();
            jQuery(this).parents('.redux-container-icon_list:first').find('.redux-icon_list-accordion-group:last').find('.redux-icon_list-header').text("New Icon List Item");
            jQuery(this).parents('.redux-icon_list-accordion-group:first').find('input[type="text"], input[type="hidden"], input[type="checkbox"], textarea, select, .media_upload_button, .label-new-window').each(function() {
                jQuery(this).val('');
                jQuery(this).find('input[type="checkbox"]').removeAttr('checked');
            });
        }
    });

    /** Remove All Slides << New
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-icon_list-remove-all').live('click', function() {

        jQuery(this).parents('.redux-container-icon_list').find('.redux-icon_list-accordion-group').not(':first').each(function() {
            jQuery(this).children().find('.redux-icon_list-remove').trigger('click');
        });

    });

    /** Add Slide
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-icon_list-add').click(function() {

        // Find Last Slide
        var oldSlide = jQuery(this).parent().prev().find('.redux-icon_list-accordion-group:last');

        // Clear Fancy Icon Selector
        oldSlide.find('select').select2('destroy');

        // Clone Last Slide
        var newSlide = oldSlide.clone(true);

        // Figure out Item Count from Last Slide input field ID
        var itemsCount = jQuery(newSlide).find('input[type="text"]').attr("name").match(/[0-9]+(?!.*[0-9])/);
        var itemsCount1 = itemsCount * 1 + 1;

        // Increment specified field Names and IDs
        jQuery(newSlide).find('input[type="text"], input[type="hidden"], input[type="checkbox"], textarea, select, .media_upload_button, .label-new-window').each(function() {

            if (typeof jQuery(this).attr("name") !== 'undefined') {
                jQuery(this).attr("name", jQuery(this).attr("name").replace(/[0-9]+(?!.*[0-9])/, itemsCount1));
            }

            if (typeof jQuery(this).attr("id") !== 'undefined') {
                jQuery(this).attr("id", jQuery(this).attr("id").replace(/[0-9]+(?!.*[0-9])/, itemsCount1));
            }
            if(typeof jQuery(this).attr("for") !== 'undefined') {
                jQuery(this).attr("for", jQuery(this).attr("for").replace(/[0-9]+(?!.*[0-9])/, itemsCount1) );
            }
            
            jQuery(this).val('');
            if (jQuery(this).hasClass('icon_list-sort')) {
                jQuery(this).val(itemsCount1);
            }
        });

        // Clear Fields - remove attributes and hide thumbnail
        // newSlide.find('input[type="checkbox"]').removeAttr('checked');
        // newSlide.find('.screenshot').removeAttr('style');
        // newSlide.find('.screenshot').addClass('hide');
        // newSlide.find('.screenshot a').attr('href', '');
        // newSlide.find('.remove-image').addClass('hide');
        // newSlide.find('.redux-slides-image').attr('src', '').removeAttr('id');

        // Append New Slide Title and UI
        newSlide.find('h3').text('').append('<span class="redux-icon_list-header">New Icon List Item</span><span class="ui-accordion-header-icon ui-icon ui-icon-plus"></span>');

        // Append Slide
        jQuery(this).parent().prev().append(newSlide);

        // Add Fancy Icon Selector
        jQuery.redux.select3();
    });

    /** Update Slide Title
     ** ---------------------------------------------------------------------*/
    jQuery('.icon_list-title').keyup(function(event) {
        var newTitle = event.target.value;
        jQuery(this).parents().eq(3).find('.redux-icon_list-header').text(newTitle);
    });

    /** Accordion Setup and Sorting
     ** ---------------------------------------------------------------------*/
    jQuery(function() {
        jQuery(".redux-icon_list-accordion")
            .accordion({
                header: "> div > fieldset > h3",
                collapsible: true,
                active: false,
                heightStyle: "content",
                icons: { "header": "ui-icon-plus", "activeHeader": "ui-icon-minus" }
            })
            .sortable({
                axis: "y",
                handle: "h3",
                connectWith: ".redux-icon_list-accordion",
                start: function(e, ui) {
                    ui.placeholder.height(ui.item.height());
                    ui.placeholder.width(ui.item.width());
                },
                placeholder: "ui-state-highlight",
                stop: function(event, ui) {
                    // IE doesn't register the blur when sorting
                    // so trigger focusout handlers to remove .ui-state-focus
                    ui.item.children("h3").triggerHandler("focusout");
                    var inputs = jQuery('input.icon_list-sort');
                    inputs.each(function(idx) {
                        jQuery(this).val(idx);
                    });
                }
            });
    });

});
/** Icon Menu Custom Field JS
 ** =========================
 ** (c) Premio Themes | premiothemes.com | <hello@premiothemes.com>
 */

/* global redux_change, wp */

jQuery(document).ready(function() {

    /** Color Picker
     ** ---------------------------------------------------------------------*/
    jQuery('.color--picker, .color--picker-2').each(function() {
        jQuery('#'+ jQuery(this).attr('id')+ '').each(function() {
            jQuery(this).ColorPicker({
                onSubmit: function(hsb, hex, rgb, el) {
                        jQuery(el).attr('value', '#' + hex);
                        jQuery(el).ColorPickerHide();
                        jQuery(el).css({background: '#' + hex});
                    },
                onBeforeShow: function () {
                    jQuery(this).ColorPickerSetColor(this.value);
                }
            });
        });
    });

    /** Remove Slide
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-icon_menu-remove').live('click', function() {
        redux_change(jQuery(this));

        // Clear all Field Values
        jQuery(this).parent().siblings().find('input[type="text"]').val('');
        jQuery(this).parent().siblings().find('input[type="checkbox"]').val('');
        jQuery(this).parent().siblings().find('textarea').val('');
        jQuery(this).parent().siblings().find('select').val('');
        jQuery(this).parent().siblings().find('input[type="hidden"]').val('');

        // Figure out Item Count
        var itemsCount = jQuery(this).parents('.redux-container-icon_menu').find('.redux-icon_menu-accordion-group').length;

        // If we have more than one item, remove the current Item
        if (itemsCount > 1) {
            jQuery(this).parents('.redux-icon_menu-accordion-group:first').slideUp('medium', function() {
                jQuery(this).remove();
            });
        } else {
            jQuery(this).parents('.redux-icon_menu-accordion-group:first').find('.remove-image').click();
            jQuery(this).parents('.redux-container-icon_menu:first').find('.redux-icon_menu-accordion-group:last').find('.redux-icon_menu-header').text("New Icon Menu Link");
            jQuery(this).parents('.redux-icon_menu-accordion-group:first').find('input[type="text"], input[type="hidden"], select, label, .color--picker,  .label-color--picker').each(function() {
                jQuery(this).val('');
                jQuery(this).find('input[type="checkbox"]').removeAttr('checked');
            });
        }
    });

    /** Remove All Slides << New
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-icon_menu-remove-all').live('click', function() {

        jQuery(this).parents('.redux-container-icon_menu').find('.redux-icon_menu-accordion-group').not(':first').each(function() {
            jQuery(this).children().find('.redux-icon_menu-remove').trigger('click');
        });

    });

    /** Add Slide
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-icon_menu-add').click(function() {

        // Find Last Slide
        var oldSlide = jQuery(this).parent().prev().find('.redux-icon_menu-accordion-group:last');

        // Clear Fancy Icon Selector
        oldSlide.find('select').select2('destroy');

        // Clone Last Slide
        var newSlide = oldSlide.clone(true);

        // Figure out Item Count from Last Slide input field ID
        var itemsCount = jQuery(newSlide).find('input[type="text"]').attr("name").match(/[0-9]+(?!.*[0-9])/);
        var itemsCount1 = itemsCount * 1 + 1;

        // Increment specified field Names and IDs
        jQuery(newSlide).find('input[type="text"], input[type="hidden"], select, label, .color--picker,  .label-color--picker').each(function() {

            if (typeof jQuery(this).attr("name") !== 'undefined') {
                jQuery(this).attr("name", jQuery(this).attr("name").replace(/[0-9]+(?!.*[0-9])/, itemsCount1));
            }

            if (typeof jQuery(this).attr("id") !== 'undefined') {
                jQuery(this).attr("id", jQuery(this).attr("id").replace(/[0-9]+(?!.*[0-9])/, itemsCount1));
            }
            if (typeof jQuery(this).attr("for") !== 'undefined') {
                jQuery(this).attr("for", jQuery(this).attr("for").replace(/[0-9]+(?!.*[0-9])/, itemsCount1));
            }

            jQuery(this).val('');
            if (jQuery(this).hasClass('icon_menu-sort')) {
                jQuery(this).val(itemsCount1);
            }
        });

        // Clear Fields - remove attributes and hide thumbnail
        newSlide.find('input[type="checkbox"]').removeAttr('checked');
        // newSlide.find('.screenshot').removeAttr('style');
        // newSlide.find('.screenshot').addClass('hide');
        // newSlide.find('.screenshot a').attr('href', '');
        // newSlide.find('.remove-image').addClass('hide');
        // newSlide.find('.redux-slides-image').attr('src', '').removeAttr('id');
        newSlide.find('.color--picker').each(function() {
            jQuery(this).attr('value', '').removeAttr('style');
        });;


        // Append New Slide Title and UI
        newSlide.find('h3').text('').append('<span class="redux-icon_menu-header">New Icon Menu Link</span><span class="ui-accordion-header-icon ui-icon ui-icon-plus"></span>');

        // Append Slide
        jQuery(this).parent().prev().append(newSlide);

        // Add Fancy Icon Selector
        jQuery.redux.select3();
    });

    /** Update Slide Title
     ** ---------------------------------------------------------------------*/
    jQuery('.icon_menu-title').keyup(function(event) {
        var newTitle = event.target.value;
        jQuery(this).parents().eq(3).find('.redux-icon_menu-header').text(newTitle);
    });

    /** Accordion Setup and Sorting
     ** ---------------------------------------------------------------------*/
    jQuery(function() {
        jQuery(".redux-icon_menu-accordion")
            .accordion({
                header: "> div > fieldset > h3",
                collapsible: true,
                active: false,
                heightStyle: "content",
                icons: { "header": "ui-icon-plus", "activeHeader": "ui-icon-minus" }
            })
            .sortable({
                axis: "y",
                handle: "h3",
                connectWith: ".redux-icon_menu-accordion",
                start: function(e, ui) {
                    ui.placeholder.height(ui.item.height());
                    ui.placeholder.width(ui.item.width());
                },
                placeholder: "ui-state-highlight",
                stop: function(event, ui) {
                    // IE doesn't register the blur when sorting
                    // so trigger focusout handlers to remove .ui-state-focus
                    ui.item.children("h3").triggerHandler("focusout");
                    var inputs = jQuery('input.icon_menu-sort');
                    inputs.each(function(idx) {
                        jQuery(this).val(idx);
                    });
                }
            });
    });

});

/** Progress Bars Custom Field JS
 ** =============================
 ** (c) Premio Themes | premiothemes.com | <hello@premiothemes.com>
 */

/* global redux_change, wp */

jQuery(document).ready(function() {

    /** Color Picker
     ** ---------------------------------------------------------------------*/
    jQuery('.color--picker, .color--picker-2').each(function() {
        jQuery('#'+ jQuery(this).attr('id')+ '').each(function() {
            jQuery(this).ColorPicker({
                onSubmit: function(hsb, hex, rgb, el) {
                        jQuery(el).attr('value', '#' + hex);
                        jQuery(el).ColorPickerHide();
                        jQuery(el).css({background: '#' + hex});
                    },
                onBeforeShow: function () {
                    jQuery(this).ColorPickerSetColor(this.value);
                }
            });
        });
    });

    /** Remove Slide
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-progress_bars-remove').live('click', function() {
        redux_change(jQuery(this));

        // Clear all Field Values
        jQuery(this).parent().siblings().find('input[type="text"]').val('');
        jQuery(this).parent().siblings().find('input[type="checkbox"]').val('');
        jQuery(this).parent().siblings().find('textarea').val('');
        jQuery(this).parent().siblings().find('select').val('');
        jQuery(this).parent().siblings().find('input[type="hidden"]').val('');

        // Figure out Item Count
        var itemsCount = jQuery(this).parents('.redux-container-progress_bars').find('.redux-progress_bars-accordion-group').length;

        // If we have more than one item, remove the current Item
        if (itemsCount > 1) {
            jQuery(this).parents('.redux-progress_bars-accordion-group:first').slideUp('medium', function() {
                jQuery(this).remove();
            });
        } else {
            jQuery(this).parents('.redux-progress_bars-accordion-group:first').find('.remove-image').click();
            jQuery(this).parents('.redux-container-progress_bars:first').find('.redux-progress_bars-accordion-group:last').find('.redux-progress_bars-header').text("New Progress Bar");
            jQuery(this).parents('.redux-progress_bars-accordion-group:first').find('input[type="text"], input[type="hidden"], .color--picker, .label-color--picker').each(function() {
                jQuery(this).val('');
                // jQuery(this).find('input[type="checkbox"]').removeAttr('checked');
            });
        }
    });

    /** Remove All Slides
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-progress_bars-remove-all').live('click', function() {

        jQuery(this).parents('.redux-container-progress_bars').find('.redux-progress_bars-accordion-group').not(':first').each(function() {
            jQuery(this).children().find('.redux-progress_bars-remove').trigger('click');
        });

    });

    /** Add Slide
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-progress_bars-add').click(function() {

        // Find Last Slide
        var oldSlide = jQuery(this).parent().prev().find('.redux-progress_bars-accordion-group:last');

        // Clear Fancy Icon Selector
        // oldSlide.find('select').select2('destroy');

        // Clone Last Slide
        var newSlide = oldSlide.clone(true);

        // Figure out Item Count from Last Slide input field ID
        var itemsCount = jQuery(newSlide).find('input[type="text"]').attr("name").match(/[0-9]+(?!.*[0-9])/);
        var itemsCount1 = itemsCount * 1 + 1;

        // Increment specified field Names and IDs
        jQuery(newSlide).find('input[type="text"], input[type="hidden"], .color--picker, .label-color--picker').each(function() {

            if (typeof jQuery(this).attr("name") !== 'undefined') {
                jQuery(this).attr("name", jQuery(this).attr("name").replace(/[0-9]+(?!.*[0-9])/, itemsCount1));
            }

            if (typeof jQuery(this).attr("id") !== 'undefined') {
                jQuery(this).attr("id", jQuery(this).attr("id").replace(/[0-9]+(?!.*[0-9])/, itemsCount1));
            }
            if (typeof jQuery(this).attr("for") !== 'undefined') {
                jQuery(this).attr("for", jQuery(this).attr("for").replace(/[0-9]+(?!.*[0-9])/, itemsCount1));
            }

            jQuery(this).val('');
            if (jQuery(this).hasClass('progress_bars-sort')) {
                jQuery(this).val(itemsCount1);
            }
        });

        // Clear Fields - remove attributes and hide thumbnail
        // newSlide.find('input[type="checkbox"]').removeAttr('checked');
        // newSlide.find('.screenshot').removeAttr('style');
        // newSlide.find('.screenshot').addClass('hide');
        // newSlide.find('.screenshot a').attr('href', '');
        // newSlide.find('.remove-image').addClass('hide');
        // newSlide.find('.redux-slides-image').attr('src', '').removeAttr('id');
        newSlide.find('.color--picker').each(function() {
            jQuery(this).attr('value', '').removeAttr('style');
        });;


        // Append New Slide Title and UI
        newSlide.find('h3').text('').append('<span class="redux-progress_bars-header">New Progress Bar</span><span class="ui-accordion-header-icon ui-icon ui-icon-plus"></span>');

        // Append Slide
        jQuery(this).parent().prev().append(newSlide);

        // Add Fancy Icon Selector
        // jQuery.redux.select3();
    });

    /** Update Slide Title
     ** ---------------------------------------------------------------------*/
    jQuery('.progress_bars-title').keyup(function(event) {
        var newTitle = event.target.value;
        jQuery(this).parents().eq(3).find('.redux-progress_bars-header').text(newTitle);
    });

    /** Accordion Setup and Sorting
     ** ---------------------------------------------------------------------*/
    jQuery(function() {
        jQuery(".redux-progress_bars-accordion")
            .accordion({
                header: "> div > fieldset > h3",
                collapsible: true,
                active: false,
                heightStyle: "content",
                icons: { "header": "ui-icon-plus", "activeHeader": "ui-icon-minus" }
            })
            .sortable({
                axis: "y",
                handle: "h3",
                connectWith: ".redux-progress_bars-accordion",
                start: function(e, ui) {
                    ui.placeholder.height(ui.item.height());
                    ui.placeholder.width(ui.item.width());
                },
                placeholder: "ui-state-highlight",
                stop: function(event, ui) {
                    // IE doesn't register the blur when sorting
                    // so trigger focusout handlers to remove .ui-state-focus
                    ui.item.children("h3").triggerHandler("focusout");
                    var inputs = jQuery('input.progress_bars-sort');
                    inputs.each(function(idx) {
                        jQuery(this).val(idx);
                    });
                }
            });
    });

});

/** Team Profiles Custom Field JS
 ** =============================
 ** (c) Premio Themes | premiothemes.com | <hello@premiothemes.com>
 */

/* global redux_change, wp */

jQuery(document).ready(function() {

    /** Media Uploader
     ** ---------------------------------------------------------------------*/
    var media_uploader = null;

    // Media Uploader Function
    function open_media_uploader_image(buttonId) {
        var button = buttonId;

        // Set Media Parameteres
        media_uploader = wp.media({
            frame: "post",
            state: "insert",
            multiple: false
        });

        // Actions to take when Media is inserted
        media_uploader.on("insert", function() {
            var json = media_uploader.state().get("selection").first().toJSON();

            // Debugging
            // console.table(json);
            // console.log(jQuery("#" + button)[0]);
            // console.log(json.sizes.thumbnail.url);

            // Show Image by removing the hide class
            jQuery("#" + button).parent().prev(".screenshot").removeClass("hide").find(".redux-team_profiles-image").attr("src", json.sizes.thumbnail.url);
            jQuery("#" + button).next(".remove-image").removeClass("hide");

            // Update hidden Field Values
            jQuery("#" + button).parent().next(".redux-team_profiles-list").find(".team_profiles_image .upload-id").val(json.id);
            jQuery("#" + button).parent().next(".redux-team_profiles-list").find(".team_profiles_image .upload").val(json.url);
            jQuery("#" + button).parent().next(".redux-team_profiles-list").find(".team_profiles_image .upload-thumbnail").val(json.sizes.thumbnail.url);
        });

        // Open WP Media Uploader
        media_uploader.open();
    }
    // Run Media Uploader when the Upload button in clicked
    jQuery(".redux-team_profiles-accordion").on('click', '.redux_team_profiles_add_remove .media_upload_button', function() {
        var clickedImageUploadBtn = jQuery(this).attr('id');
        open_media_uploader_image(clickedImageUploadBtn);
    });
    // Hide Image and clear Hidden Fields when the Remove button is clicked
    jQuery(".redux-team_profiles-accordion").on('click', '.redux_team_profiles_add_remove .remove-image', function() {

        // Hide Image by applying hide class
        jQuery(this).parent().prev(".screenshot").addClass("hide");
        jQuery(this).addClass("hide");

        // Clear hidden Field Values
        jQuery(this).parent().next(".redux-team_profiles-list").find(".team_profiles_image .upload-id").val("");
        jQuery(this).parent().next(".redux-team_profiles-list").find(".team_profiles_image .upload").val("");
        jQuery(this).parent().next(".redux-team_profiles-list").find(".team_profiles_image .upload-thumbnail").val("");


    });

    /** Remove Slide
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-team_profiles-remove').live('click', function() {
        redux_change(jQuery(this));

        // Clear all Field Values
        jQuery(this).parent().siblings().find('input[type="text"]').val('');
        jQuery(this).parent().siblings().find('input[type="checkbox"]').val('');
        jQuery(this).parent().siblings().find('textarea').val('');
        jQuery(this).parent().siblings().find('select').val('');
        jQuery(this).parent().siblings().find('input[type="hidden"]').val('');

        // Figure out Item Count
        var itemsCount = jQuery(this).parents('.redux-container-team_profiles').find('.redux-team_profiles-accordion-group').length;

        // If we have more than one item, remove the current Item
        if (itemsCount > 1) {
            jQuery(this).parents('.redux-team_profiles-accordion-group:first').slideUp('medium', function() {
                jQuery(this).remove();
            });
        } else {
            jQuery(this).parents('.redux-team_profiles-accordion-group:first').find('.remove-image').click();
            jQuery(this).parents('.redux-container-team_profiles:first').find('.redux-team_profiles-accordion-group:last').find('.redux-team_profiles-header').text("New Team Member");
            jQuery(this).parents('.redux-team_profiles-accordion-group:first').find('input[type="text"], input[type="hidden"], input[type="checkbox"], textarea, select, .media_upload_button, .label-new-window').each(function() {
                jQuery(this).val('');
                jQuery(this).find('input[type="checkbox"]').removeAttr('checked');
            });
        }
    });

    /** Remove All Slides
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-team_profiles-remove-all').live('click', function() {

        jQuery(this).parents('.redux-container-team_profiles').find('.redux-team_profiles-accordion-group').not(':first').each(function() {
            jQuery(this).children().find('.redux-team_profiles-remove').trigger('click');
        });

    });

    /** Add Slide
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-team_profiles-add').click(function() {

        // Find Last Slide
        var oldSlide = jQuery(this).parent().prev().find('.redux-team_profiles-accordion-group:last');

        // Clear Fancy Icon Selector
        oldSlide.find('select').select2('destroy');

        // Clone Last Slide
        var newSlide = oldSlide.clone(true);

        // Figure out Item Count from Last Slide input field ID
        var itemsCount = jQuery(newSlide).find('input[type="text"]').attr("name").match(/[0-9]+(?!.*[0-9])/);
        var itemsCount1 = itemsCount * 1 + 1;

        // Increment specified field Names and IDs
        jQuery(newSlide).find('input[type="text"], input[type="hidden"], input[type="checkbox"], textarea, select, .media_upload_button, .label-new-window').each(function() {

            if (typeof jQuery(this).attr("name") !== 'undefined') {
                jQuery(this).attr("name", jQuery(this).attr("name").replace(/[0-9]+(?!.*[0-9])/, itemsCount1));
            }

            if (typeof jQuery(this).attr("id") !== 'undefined') {
                jQuery(this).attr("id", jQuery(this).attr("id").replace(/[0-9]+(?!.*[0-9])/, itemsCount1));
            }
            if(typeof jQuery(this).attr("for") !== 'undefined') {
                jQuery(this).attr("for", jQuery(this).attr("for").replace(/[0-9]+(?!.*[0-9])/, itemsCount1) );
            }
            
            jQuery(this).val('');
            if (jQuery(this).hasClass('team_profiles-sort')) {
                jQuery(this).val(itemsCount1);
            }
        });

        // Clear Fields - remove attributes and hide thumbnail
        newSlide.find('input[type="checkbox"]').removeAttr('checked');
        newSlide.find('.screenshot').removeAttr('style');
        newSlide.find('.screenshot').addClass('hide');
        newSlide.find('.screenshot a').attr('href', '');
        newSlide.find('.remove-image').addClass('hide');
        newSlide.find('.redux-slides-image').attr('src', '').removeAttr('id');

        // Append New Slide Title and UI
        newSlide.find('h3').text('').append('<span class="redux-team_profiles-header"><span class="member-first-name">New Team Member</span><span class="member-last-name"></span><span class="ui-accordion-header-icon ui-icon ui-icon-plus"></span>');

        // Append Slide
        jQuery(this).parent().prev().append(newSlide);

        // Add Fancy Icon Selector
        // jQuery.redux.select3();
    });

    /** Update Slide Title
     ** ---------------------------------------------------------------------*/
    jQuery('.team_profiles-first_name').keyup(function(event) {
        var newTitle = event.target.value;
        jQuery(this).parents().eq(3).find('.member-first-name').text(newTitle);
    });
    jQuery('.team_profiles-last_name').keyup(function(event) {
        var newTitle = event.target.value;
        jQuery(this).parents().eq(3).find('.member-last-name').text(' ' + newTitle);
    });

    /** Accordion Setup and Sorting
     ** ---------------------------------------------------------------------*/
    jQuery(function() {
        jQuery(".redux-team_profiles-accordion")
            .accordion({
                header: "> div > fieldset > h3",
                collapsible: true,
                active: false,
                heightStyle: "content",
                icons: { "header": "ui-icon-plus", "activeHeader": "ui-icon-minus" }
            })
            .sortable({
                axis: "y",
                handle: "h3",
                connectWith: ".redux-team_profiles-accordion",
                start: function(e, ui) {
                    ui.placeholder.height(ui.item.height());
                    ui.placeholder.width(ui.item.width());
                },
                placeholder: "ui-state-highlight",
                stop: function(event, ui) {
                    // IE doesn't register the blur when sorting
                    // so trigger focusout handlers to remove .ui-state-focus
                    ui.item.children("h3").triggerHandler("focusout");
                    var inputs = jQuery('input.team_profiles-sort');
                    inputs.each(function(idx) {
                        jQuery(this).val(idx);
                    });
                }
            });
    });

});
/** Testimonials Custom Field JS
 ** ============================
 ** (c) Premio Themes | premiothemes.com | <hello@premiothemes.com>
 */

/* global redux_change, wp */

jQuery(document).ready(function() {

    /** Media Uploader
     ** ---------------------------------------------------------------------*/
    var media_uploader = null;

    // Media Uploader Function
    function open_media_uploader_image(buttonId) {
        var button = buttonId;

        // Set Media Parameteres
        media_uploader = wp.media({
            frame: "post",
            state: "insert",
            multiple: false
        });

        // Actions to take when Media is inserted
        media_uploader.on("insert", function() {
            var json = media_uploader.state().get("selection").first().toJSON();

            // Debugging
            // console.table(json);
            // console.log(jQuery("#" + button)[0]);
            // console.log(json.sizes.thumbnail.url);

            // Show Image by removing the hide class
            jQuery("#" + button).parent().prev(".screenshot").removeClass("hide").find(".redux-testimonials-image").attr("src", json.sizes.thumbnail.url);
            jQuery("#" + button).next(".remove-image").removeClass("hide");

            // Update hidden Field Values
            jQuery("#" + button).parent().next(".redux-testimonials-list").find(".testimonials_image .upload-id").val(json.id);
            jQuery("#" + button).parent().next(".redux-testimonials-list").find(".testimonials_image .upload").val(json.url);
            jQuery("#" + button).parent().next(".redux-testimonials-list").find(".testimonials_image .upload-thumbnail").val(json.sizes.thumbnail.url);
        });

        // Open WP Media Uploader
        media_uploader.open();
    }
    // Run Media Uploader when the Upload button in clicked
    jQuery(".redux-testimonials-accordion").on('click', '.redux_testimonials_add_remove .media_upload_button', function() {
        var clickedImageUploadBtn = jQuery(this).attr('id');
        open_media_uploader_image(clickedImageUploadBtn);
    });
    // Hide Image and clear Hidden Fields when the Remove button is clicked
    jQuery(".redux-testimonials-accordion").on('click', '.redux_testimonials_add_remove .remove-image', function() {

        // Hide Image by applying hide class
        jQuery(this).parent().prev(".screenshot").addClass("hide");
        jQuery(this).addClass("hide");

        // Clear hidden Field Values
        jQuery(this).parent().next(".redux-testimonials-list").find(".testimonials_image .upload-id").val("");
        jQuery(this).parent().next(".redux-testimonials-list").find(".testimonials_image .upload").val("");
        jQuery(this).parent().next(".redux-testimonials-list").find(".testimonials_image .upload-thumbnail").val("");


    });

    /** Remove Slide
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-testimonials-remove').live('click', function() {
        redux_change(jQuery(this));

        // Clear all Field Values
        jQuery(this).parent().siblings().find('input[type="text"]').val('');
        jQuery(this).parent().siblings().find('input[type="checkbox"]').val('');
        jQuery(this).parent().siblings().find('textarea').val('');
        jQuery(this).parent().siblings().find('select').val('');
        jQuery(this).parent().siblings().find('input[type="hidden"]').val('');

        // Figure out Item Count
        var itemsCount = jQuery(this).parents('.redux-container-testimonials').find('.redux-testimonials-accordion-group').length;

        // If we have more than one item, remove the current Item
        if (itemsCount > 1) {
            jQuery(this).parents('.redux-testimonials-accordion-group:first').slideUp('medium', function() {
                jQuery(this).remove();
            });
        } else {
            jQuery(this).parents('.redux-testimonials-accordion-group:first').find('.remove-image').click();
            jQuery(this).parents('.redux-container-testimonials:first').find('.redux-testimonials-accordion-group:last').find('.redux-testimonials-header' ).text("New Testimonial");
            jQuery(this).parents('.redux-testimonials-accordion-group:first').find('input[type="text"], input[type="hidden"], input[type="checkbox"], textarea, select, .media_upload_button, .label-new-window').each(function() {
                jQuery(this).val('');
                jQuery(this).find('input[type="checkbox"]').removeAttr('checked');
            });
        }
    });

    /** Remove All Slides
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-testimonials-remove-all').live('click', function() {

        jQuery(this).parents('.redux-container-testimonials').find('.redux-testimonials-accordion-group').not(':first').each(function() {
            jQuery(this).children().find('.redux-testimonials-remove').trigger('click');
        });

    });


    /** Add Slide
     ** ---------------------------------------------------------------------*/
    jQuery('.redux-testimonials-add').click(function() {

        // Find Last Slide
        var oldSlide = jQuery(this).parent().prev().find('.redux-testimonials-accordion-group:last');

        // Clear Fancy Icon Selector
        oldSlide.find('select').select2('destroy');

        // Clone Last Slide
        var newSlide = oldSlide.clone(true);

        // Figure out Item Count from Last Slide input field ID
        var itemsCount = jQuery(newSlide).find('input[type="text"]').attr("name").match(/[0-9]+(?!.*[0-9])/);
        var itemsCount1 = itemsCount * 1 + 1;

        // Increment specified field Names and IDs
        jQuery(newSlide).find('input[type="text"], input[type="hidden"], input[type="checkbox"], textarea, select, .media_upload_button, .label-new-window').each(function() {

            if (typeof jQuery(this).attr("name") !== 'undefined') {
                jQuery(this).attr("name", jQuery(this).attr("name").replace(/[0-9]+(?!.*[0-9])/, itemsCount1));
            }

            if (typeof jQuery(this).attr("id") !== 'undefined') {
                jQuery(this).attr("id", jQuery(this).attr("id").replace(/[0-9]+(?!.*[0-9])/, itemsCount1));
            }
            if(typeof jQuery(this).attr("for") !== 'undefined') {
                jQuery(this).attr("for", jQuery(this).attr("for").replace(/[0-9]+(?!.*[0-9])/, itemsCount1) );
            }
            
            jQuery(this).val('');
            if (jQuery(this).hasClass('testimonials-sort')) {
                jQuery(this).val(itemsCount1);
            }
        });

        // Clear Fields - remove attributes and hide thumbnail
        newSlide.find('input[type="checkbox"]').removeAttr('checked');
        newSlide.find('.screenshot').removeAttr('style');
        newSlide.find('.screenshot').addClass('hide');
        newSlide.find('.screenshot a').attr('href', '');
        newSlide.find('.remove-image').addClass('hide');
        newSlide.find('.redux-slides-image').attr('src', '').removeAttr('id');

        // Append New Slide Title and UI
        newSlide.find('h3').text('').append('<span class="redux-testimonials-header">New Testimonial</span><span class="ui-accordion-header-icon ui-icon ui-icon-plus"></span>');

        // Append Slide
        jQuery(this).parent().prev().append(newSlide);

        // Add Fancy Icon Selector
        jQuery.redux.select3();
    });

    /** Update Slide Title
     ** ---------------------------------------------------------------------*/
    jQuery('.testimonials-name').keyup(function(event) {
        var newTitle = event.target.value;
        jQuery(this).parents().eq(3).find('.redux-testimonials-header').text(newTitle);
    });

    /** Accordion Setup and Sorting
     ** ---------------------------------------------------------------------*/
    jQuery(function() {
        jQuery(".redux-testimonials-accordion")
            .accordion({
                header: "> div > fieldset > h3",
                collapsible: true,
                active: false,
                heightStyle: "content",
                icons: { "header": "ui-icon-plus", "activeHeader": "ui-icon-minus" }
            })
            .sortable({
                axis: "y",
                handle: "h3",
                connectWith: ".redux-testimonials-accordion",
                start: function(e, ui) {
                    ui.placeholder.height(ui.item.height());
                    ui.placeholder.width(ui.item.width());
                },
                placeholder: "ui-state-highlight",
                stop: function(event, ui) {
                    // IE doesn't register the blur when sorting
                    // so trigger focusout handlers to remove .ui-state-focus
                    ui.item.children("h3").triggerHandler("focusout");
                    var inputs = jQuery('input.testimonials-sort');
                    inputs.each(function(idx) {
                        jQuery(this).val(idx);
                    });
                }
            });
    });

});
/** Premio Verify JS
 ** ================
 ** (c) Premio Themes | premiothemes.com | <hello@premiothemes.com>
 */

/* global redux_change, wp */

jQuery(document).ready(function () {

    if( jQuery('.buyer-informer').length > 0 ) {
    	// var notifier_icon = jQuery('<i class="el-icon-info-sign"></i>');
        // notifier_icon.appendTo('#10_section_group_li_a span');
        jQuery('#10_section_group_li_a .el-icon-upload').removeClass('el-icon-upload').addClass('el-icon-info-sign');
    }

    jQuery('#pt_minigo-premio_verify_user').parent().parent().children('th').remove();
    jQuery('#pt_minigo-premio_verify_user').parent().parent().children('td').attr('colspan', '100%');

});
